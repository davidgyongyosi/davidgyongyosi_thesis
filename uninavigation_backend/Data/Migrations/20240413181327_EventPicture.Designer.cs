// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using uninavigation_backend.Data;

#nullable disable

namespace uninavigation_backend.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240413181327_EventPicture")]
    partial class EventPicture
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "684f6126-7ab3-471b-8f6a-01ef2e5c07ff",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("uninavigation_backend.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            ContentType = "",
                            Data = new byte[] { 0 },
                            Description = "Description for Event 1",
                            EndTime = new DateTime(2024, 10, 4, 22, 17, 15, 0, DateTimeKind.Unspecified),
                            Location = "Office 109",
                            Name = "Event 1",
                            StartTime = new DateTime(2024, 10, 4, 18, 17, 15, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = 2,
                            ContentType = "",
                            Data = new byte[] { 0 },
                            Description = "Description for Event 2",
                            EndTime = new DateTime(2025, 1, 22, 21, 6, 2, 0, DateTimeKind.Unspecified),
                            Location = "Office 204",
                            Name = "Event 2",
                            StartTime = new DateTime(2025, 1, 22, 17, 6, 2, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = 3,
                            ContentType = "",
                            Data = new byte[] { 0 },
                            Description = "Description for Event 3",
                            EndTime = new DateTime(2024, 6, 28, 6, 10, 38, 0, DateTimeKind.Unspecified),
                            Location = "Focus Room 203",
                            Name = "Event 3",
                            StartTime = new DateTime(2024, 6, 28, 3, 10, 38, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = 4,
                            ContentType = "",
                            Data = new byte[] { 0 },
                            Description = "Description for Event 4",
                            EndTime = new DateTime(2025, 3, 18, 11, 1, 50, 0, DateTimeKind.Unspecified),
                            Location = "Office 103",
                            Name = "Event 4",
                            StartTime = new DateTime(2025, 3, 18, 9, 1, 50, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = 5,
                            ContentType = "",
                            Data = new byte[] { 0 },
                            Description = "Description for Event 5",
                            EndTime = new DateTime(2024, 7, 15, 19, 31, 5, 0, DateTimeKind.Unspecified),
                            Location = "Washroom",
                            Name = "Event 5",
                            StartTime = new DateTime(2024, 7, 15, 15, 31, 5, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = 6,
                            ContentType = "",
                            Data = new byte[] { 0 },
                            Description = "Description for Event 6",
                            EndTime = new DateTime(2024, 5, 3, 16, 1, 40, 0, DateTimeKind.Unspecified),
                            Location = "Office 110",
                            Name = "Event 6",
                            StartTime = new DateTime(2024, 5, 3, 13, 1, 40, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = 7,
                            ContentType = "",
                            Data = new byte[] { 0 },
                            Description = "Description for Event 7",
                            EndTime = new DateTime(2024, 9, 27, 20, 25, 15, 0, DateTimeKind.Unspecified),
                            Location = "Maple Meeting Room",
                            Name = "Event 7",
                            StartTime = new DateTime(2024, 9, 27, 15, 25, 15, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = 8,
                            ContentType = "",
                            Data = new byte[] { 0 },
                            Description = "Description for Event 8",
                            EndTime = new DateTime(2024, 4, 1, 10, 27, 47, 0, DateTimeKind.Unspecified),
                            Location = "Oak Meeting Room",
                            Name = "Event 8",
                            StartTime = new DateTime(2024, 4, 1, 5, 27, 47, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = 9,
                            ContentType = "",
                            Data = new byte[] { 0 },
                            Description = "Description for Event 9",
                            EndTime = new DateTime(2024, 10, 3, 5, 36, 20, 0, DateTimeKind.Unspecified),
                            Location = "Focus Room 101",
                            Name = "Event 9",
                            StartTime = new DateTime(2024, 10, 3, 4, 36, 20, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = 10,
                            ContentType = "",
                            Data = new byte[] { 0 },
                            Description = "Description for Event 10",
                            EndTime = new DateTime(2024, 7, 27, 14, 0, 26, 0, DateTimeKind.Unspecified),
                            Location = "Focus Room 201",
                            Name = "Event 10",
                            StartTime = new DateTime(2024, 7, 27, 13, 0, 26, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = 11,
                            ContentType = "",
                            Data = new byte[] { 0 },
                            Description = "Description for Event 11",
                            EndTime = new DateTime(2024, 10, 12, 6, 2, 5, 0, DateTimeKind.Unspecified),
                            Location = "Huddle 201",
                            Name = "Event 11",
                            StartTime = new DateTime(2024, 10, 12, 3, 2, 5, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = 12,
                            ContentType = "",
                            Data = new byte[] { 0 },
                            Description = "Description for Event 12",
                            EndTime = new DateTime(2024, 6, 6, 3, 41, 53, 0, DateTimeKind.Unspecified),
                            Location = "Cedar Meeting Room",
                            Name = "Event 12",
                            StartTime = new DateTime(2024, 6, 5, 23, 41, 53, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = 13,
                            ContentType = "",
                            Data = new byte[] { 0 },
                            Description = "Description for Event 13",
                            EndTime = new DateTime(2024, 10, 11, 3, 48, 19, 0, DateTimeKind.Unspecified),
                            Location = "Focus Room 104",
                            Name = "Event 13",
                            StartTime = new DateTime(2024, 10, 11, 1, 48, 19, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = 14,
                            ContentType = "",
                            Data = new byte[] { 0 },
                            Description = "Description for Event 14",
                            EndTime = new DateTime(2024, 7, 19, 14, 2, 21, 0, DateTimeKind.Unspecified),
                            Location = "Print Point 100",
                            Name = "Event 14",
                            StartTime = new DateTime(2024, 7, 19, 12, 2, 21, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = 15,
                            ContentType = "",
                            Data = new byte[] { 0 },
                            Description = "Description for Event 15",
                            EndTime = new DateTime(2025, 2, 21, 4, 24, 6, 0, DateTimeKind.Unspecified),
                            Location = "Print Point 200",
                            Name = "Event 15",
                            StartTime = new DateTime(2025, 2, 20, 23, 24, 6, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = 16,
                            ContentType = "",
                            Data = new byte[] { 0 },
                            Description = "Description for Event 16",
                            EndTime = new DateTime(2024, 4, 26, 17, 45, 12, 0, DateTimeKind.Unspecified),
                            Location = "Elm Meeting Room",
                            Name = "Event 16",
                            StartTime = new DateTime(2024, 4, 26, 14, 45, 12, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = 17,
                            ContentType = "",
                            Data = new byte[] { 0 },
                            Description = "Description for Event 17",
                            EndTime = new DateTime(2024, 4, 14, 13, 53, 33, 0, DateTimeKind.Unspecified),
                            Location = "Juniper Meeting Room",
                            Name = "Event 17",
                            StartTime = new DateTime(2024, 4, 14, 8, 53, 33, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = 18,
                            ContentType = "",
                            Data = new byte[] { 0 },
                            Description = "Description for Event 18",
                            EndTime = new DateTime(2024, 12, 11, 15, 36, 25, 0, DateTimeKind.Unspecified),
                            Location = "Office 112",
                            Name = "Event 18",
                            StartTime = new DateTime(2024, 12, 11, 14, 36, 25, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = 19,
                            ContentType = "",
                            Data = new byte[] { 0 },
                            Description = "Description for Event 19",
                            EndTime = new DateTime(2024, 11, 7, 6, 20, 14, 0, DateTimeKind.Unspecified),
                            Location = "Kitchen",
                            Name = "Event 19",
                            StartTime = new DateTime(2024, 11, 7, 4, 20, 14, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            EventId = 20,
                            ContentType = "",
                            Data = new byte[] { 0 },
                            Description = "Description for Event 20",
                            EndTime = new DateTime(2024, 6, 7, 8, 31, 9, 0, DateTimeKind.Unspecified),
                            Location = "Spruce Meeting Room",
                            Name = "Event 20",
                            StartTime = new DateTime(2024, 6, 7, 5, 31, 9, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("uninavigation_backend.Models.NavUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "684f6126-7ab3-471b-8f6a-01ef2e5c07ff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd97547e-6bac-423c-adf4-da837a87b6db",
                            Email = "admin@admin.adm",
                            EmailConfirmed = true,
                            FirstName = "Super",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedUserName = "SUPERUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAEMtR4FVGV6MNtPufyDLWodaSfmbNaS7bJX/A3EkixY3+RJSNZyNjDoew7SqMgb6mKQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1aff3eef-9d41-465a-9439-27e5c3d6a707",
                            TwoFactorEnabled = false,
                            UserName = "superuser"
                        });
                });

            modelBuilder.Entity("uninavigation_backend.Models.RelationModels.UserEvent", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("UserEvents");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("uninavigation_backend.Models.NavUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("uninavigation_backend.Models.NavUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("uninavigation_backend.Models.NavUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("uninavigation_backend.Models.NavUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("uninavigation_backend.Models.RelationModels.UserEvent", b =>
                {
                    b.HasOne("uninavigation_backend.Models.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("uninavigation_backend.Models.NavUser", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("uninavigation_backend.Models.Event", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("uninavigation_backend.Models.NavUser", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
